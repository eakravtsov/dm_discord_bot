# --- cloudbuild.yaml ---
# This file defines a simple, single-step build process that securely
# deploys the bot by executing a self-contained script on the VM.

steps:
  # This single step connects to the VM and runs a series of commands
  # to update and restart the application.
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Connect, Update, and Deploy'
    entrypoint: 'gcloud'
    args:
      - 'compute'
      - 'ssh'
      # --- VM Details from your configuration ---
      - '--zone=us-central1-c'
      - 'eakravtsov@discord-bot-vm'
      # --- Remote Command to Execute on the VM ---
      - '--command'
      - |
          # Use a subshell that exits on any error to ensure reliability
          set -e
          
          # 1. Navigate to the application directory
          cd /opt/apps/discord-bot
          
          # 2. Fetch secrets required by the application and create the .env file.
          #    This ensures the bot always has the latest credentials on restart.
          echo "DISCORD_TOKEN=$(gcloud secrets versions access latest --secret="DISCORD_TOKEN")" > .env
          echo "GOOGLE_API_KEY=$(gcloud secrets versions access latest --secret="GOOGLE_API_KEY")" >> .env
          echo "GCP_PROJECT_ID=$(gcloud secrets versions access latest --secret="GCP_PROJECT_ID")" >> .env
          
          # 3. Pull the latest code from the specified branch.
          #    This is run as the 'discordbot' user to respect file permissions.
          sudo -u discordbot git fetch --all
          sudo -u discordbot git reset --hard origin/computeEngineVersion
          
          # 4. Ensure all files are owned by the application user after git operations.
          chown -R discordbot:discordbot .
          
          # 5. Install/update Python dependencies.
          sudo -u discordbot /opt/apps/discord-bot/venv/bin/pip install -r requirements.txt
          
          # 6. Restart the systemd service to apply all changes.
          systemctl restart discord-bot.service

# Grant the Cloud Build service account the necessary permissions to access
# the application's secrets from Secret Manager.
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/DISCORD_TOKEN/versions/latest
  - versionName: projects/$PROJECT_ID/secrets/GOOGLE_API_KEY/versions/latest
  - versionName: projects/$PROJECT_ID/secrets/GCP_PROJECT_ID/versions/latest

options:
  logging: CLOUD_LOGGING_ONLY